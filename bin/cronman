#!/bin/bash
#/////////////////////////////////////////////////////////////////////////////////////
# Cron Manager for NanoHome - manage switches with crontab
#/////////////////////////////////////////////////////////////////////////////////////

# Catch Parameters
device="$2"
description="$3"
day="$4"
daydesc="$5"
on="$6"
off="$7"

# Load config
source INSTALLDIR/config.cfg

# Get component description
component=$(grep "$description" $rootpath/devlist | cut -d'|' -f2 )

# Add cronjob
add_cronjob () {

	# cron="$1 $2 * * $3 mosquitto_pub -h $mqtt_server -u $mqtt_system_user -P $mqtt_system_pass -t $control_topic -m $4"
	cron="$1 $2 * * $3 root /usr/bin/mosquitto_pub -h $mqtt_server -u $mqtt_system_user -P $mqtt_system_pass -t $control_topic -m $4"
	# (crontab -l ; echo "$cron") | crontab -
	echo "$cron" >> /etc/crontab
}

#/////////////////////////////////////////////////////////////////////////////////////
# Add a new Cronjob
#/////////////////////////////////////////////////////////////////////////////////////
if [ "$1" = "add" ] ; then

	# Load device compatibility
	source $rootpath/devcompatibility $device $component

	# Print header
	statusmsg INPUT="HEADER" MSG="Schaltuhr aktiviert" COLOR="#c0fcb"

	# Add cronjob and print details
	if [ "$on" != "null" ]; then

		# Get hours and minutes
		on_hours="${on:0:2}"
		on_minutes="${on:3:5}"

		# Fill hours and minutes
		if [ ${#on_hours} -lt 2 ]; then on_hours="0$on_hours"; fi
		if [ "$on_minutes" = "" ]; then on_minutes="00"; fi

		# Add Cronjob
		add_cronjob "$on_minutes" "$on_hours" "$day" "$oncommand"
		cronon=$(echo ""$description" ($device) - ${oncommand^^}: $daydesc $on_hours:$on_minutes")
		echo "$cronon" >> $rootpath/cronlist
		statusmsg INPUT="MESSAGE" MSG="$cronon" COLOR="white"
	fi

	if [ "$off" != "null" ]; then

		# Get hours and minutes
		off_hours="${off:0:2}"
		off_minutes="${off:3:5}"

		# Fill hours and minutes
		if [ ${#off_hours} -lt 2 ]; then off_hours="0$off_hours"; fi
		if [ "$off_minutes" = "" ]; then off_minutes="00"; fi

		# Add Cronjob
		add_cronjob "$off_minutes" "$off_hours" "$day" "$offcommand"
		cronoff=$(echo ""$description" ($device) - ${offcommand^^}: $daydesc $off_hours:$off_minutes")
		echo "$cronoff" >> $rootpath/cronlist
		statusmsg INPUT="MESSAGE" MSG="$cronoff" COLOR="white"
	fi

#/////////////////////////////////////////////////////////////////////////////////////
# Show Cronjob
#/////////////////////////////////////////////////////////////////////////////////////
elif [ "$1" = "show" ]; then

	if [ "$device" = "all" ]; then
		cronjob=$(cat $rootpath/cronlist)
	else
		cronjob=$(grep $device $rootpath/cronlist)
	fi

	if [ ! -z "$cronjob" ]; then
		statusmsg INPUT="HEADER" MSG="Schaltuhr aktiv" COLOR="#c0fcb"
		statusmsg INPUT="MESSAGE" MSG="$cronjob" COLOR="white"
	else
		statusmsg INPUT="HEADER" MSG="Schaltuhr inaktiv" COLOR="grey"
	fi

#/////////////////////////////////////////////////////////////////////////////////////
# Remove Cronjob
#/////////////////////////////////////////////////////////////////////////////////////
elif [ "$1" = "remove" ]; then

	# Load device compatibility
	source $rootpath/devcompatibility $device $component

	sed -i "/$description ($device)/d" $rootpath/cronlist
	sed -i '\|'$control_topic'|d' /etc/crontab

	statusmsg INPUT="HEADER" MSG="Schaltuhr deaktiviert" COLOR="grey"
	statusmsg INPUT="MESSAGE" MSG="$description ($device)" COLOR="white"

#/////////////////////////////////////////////////////////////////////////////////////
# Error Exit
#/////////////////////////////////////////////////////////////////////////////////////
else
	statusmsg INPUT="ERROR" MSG="Eingabe pr√ºfen"
	exit 1
fi
